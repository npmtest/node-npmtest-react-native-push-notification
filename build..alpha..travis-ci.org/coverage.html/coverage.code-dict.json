{"/home/travis/build/npmtest/node-npmtest-react-native-push-notification/test.js":"/* istanbul instrument in package npmtest_react_native_push_notification */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-react-native-push-notification/lib.npmtest_react_native_push_notification.js":"/* istanbul instrument in package npmtest_react_native_push_notification */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_react_native_push_notification = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_react_native_push_notification = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-react-native-push-notification/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-react-native-push-notification && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_react_native_push_notification */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_react_native_push_notification\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_react_native_push_notification.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_react_native_push_notification.rollup.js'] =\n            local.assetsDict['/assets.npmtest_react_native_push_notification.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_react_native_push_notification.__dirname + '/lib.npmtest_react_native_push_notification.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-react-native-push-notification/node_modules/react-native-push-notification/index.js":"/**\n * @providesModule Notifications\n */\n\n'use strict';\n\nvar RNNotificationsComponent = require( './component' );\n\nvar AppState = RNNotificationsComponent.state;\nvar RNNotifications = RNNotificationsComponent.component;\n\nvar Platform = require('react-native').Platform;\n\nvar Notifications = {\n\thandler: RNNotifications,\n\tonRegister: false,\n\tonError: false,\n\tonNotification: false,\n  onRemoteFetch: false,\n\tisLoaded: false,\n\thasPoppedInitialNotification: false,\n\n\tisPermissionsRequestPending: false,\n\n\tpermissions: {\n\t\talert: true,\n\t\tbadge: true,\n\t\tsound: true\n\t}\n};\n\nNotifications.callNative = function(name: String, params: Array) {\n\tif ( typeof this.handler[name] === 'function' ) {\n\t\tif ( typeof params !== 'array' &&\n\t\t\t typeof params !== 'object' ) {\n\t\t\tparams = [];\n\t\t}\n\n\t\treturn this.handler[name](...params);\n\t} else {\n\t\treturn null;\n\t}\n};\n\n/**\n * Configure local and remote notifications\n * @param {Object}\t\toptions\n * @param {function}\toptions.onRegister - Fired when the user registers for remote notifications.\n * @param {function}\toptions.onNotification - Fired when a remote notification is received.\n * @param {function} \toptions.onError - None\n * @param {Object}\t\toptions.permissions - Permissions list\n * @param {Boolean}\t\toptions.requestPermissions - Check permissions when register\n */\nNotifications.configure = function(options: Object) {\n\tif ( typeof options.onRegister !== 'undefined' ) {\n\t\tthis.onRegister = options.onRegister;\n\t}\n\n\tif ( typeof options.onError !== 'undefined' ) {\n\t\tthis.onError = options.onError;\n\t}\n\n\tif ( typeof options.onNotification !== 'undefined' ) {\n\t\tthis.onNotification = options.onNotification;\n\t}\n\n\tif ( typeof options.permissions !== 'undefined' ) {\n\t\tthis.permissions = options.permissions;\n\t}\n\n\tif ( typeof options.senderID !== 'undefined' ) {\n\t\tthis.senderID = options.senderID;\n\t}\n\n\tif ( typeof options.onRemoteFetch !== 'undefined' ) {\n\t\tthis.onRemoteFetch = options.onRemoteFetch;\n\t}\n\n\tif ( this.isLoaded === false ) {\n\t\tthis._onRegister = this._onRegister.bind(this);\n\t\tthis._onNotification = this._onNotification.bind(this);\n\t\tthis._onRemoteFetch = this._onRemoteFetch.bind(this);\n\t\tthis.callNative( 'addEventListener', [ 'register', this._onRegister ] );\n\t\tthis.callNative( 'addEventListener', [ 'notification', this._onNotification ] );\n\t\tthis.callNative( 'addEventListener', [ 'localNotification', this._onNotification ] );\n\t\tPlatform.OS === 'android' ? this.callNative( 'addEventListener', [ 'remoteFetch', this._onRemoteFetch ] ) : null\n\n\t\tthis.isLoaded = true;\n\t}\n\n\tif ( this.hasPoppedInitialNotification === false &&\n\t\t\t( options.popInitialNotification === undefined || options.popInitialNotification === true ) ) {\n\t\tthis.popInitialNotification(function(firstNotification) {\n\t\t\tif ( firstNotification !== null ) {\n\t\t\t\tthis._onNotification(firstNotification, true);\n\t\t\t}\n\t\t}.bind(this));\n\t\tthis.hasPoppedInitialNotification = true;\n\t}\n\n\tif ( options.requestPermissions !== false ) {\n\t\tthis._requestPermissions();\n\t}\n\n};\n\n/* Unregister */\nNotifications.unregister = function() {\n\tthis.callNative( 'removeEventListener', [ 'register', this._onRegister ] )\n\tthis.callNative( 'removeEventListener', [ 'notification', this._onNotification ] )\n\tthis.callNative( 'removeEventListener', [ 'localNotification', this._onNotification ] )\n\tPlatform.OS === 'android' ? this.callNative( 'removeEventListener', [ 'remoteFetch', this._onRemoteFetch ] ) : null\n\tthis.isLoaded = false;\n};\n\n/**\n * Local Notifications\n * @param {Object}\t\tdetails\n * @param {String}\t\tdetails.message - The message displayed in the notification alert.\n * @param {String}\t\tdetails.title  -  ANDROID ONLY: The title displayed in the notification alert.\n * @param {String}\t\tdetails.ticker -  ANDROID ONLY: The ticker displayed in the status bar.\n * @param {Object}\t\tdetails.userInfo -  iOS ONLY: The userInfo used in the notification alert.\n */\nNotifications.localNotification = function(details: Object) {\n\tif ( Platform.OS === 'ios' ) {\n\t\t// https://developer.apple.com/reference/uikit/uilocalnotification\n\n\t\tlet soundName = details.soundName ? details.soundName : 'default'; // play sound (and vibrate) as default behaviour\n\n\t\tif (details.hasOwnProperty('playSound') && !details.playSound) {\n\t\t\tsoundName = ''; // empty string results in no sound (and no vibration)\n\t\t}\n\n\t\t// for valid fields see: https://developer.apple.com/library/ios/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/Chapters/IPhoneOSClientImp.html\n\t\t// alertTitle only valid for apple watch: https://developer.apple.com/library/ios/documentation/iPhone/Reference/UILocalNotification_Class/#//apple_ref/occ/instp/UILocalNotification/alertTitle\n\n\t\tthis.handler.presentLocalNotification({\n\t\t\talertTitle: details.title,\n\t\t\talertBody: details.message,\n\t\t\talertAction: details.alertAction,\n\t\t\tcategory: details.category,\n\t\t\tsoundName: soundName,\n\t\t\tapplicationIconBadgeNumber: details.number,\n\t\t\tuserInfo: details.userInfo\n\t\t});\n\t} else {\n\t\tthis.handler.presentLocalNotification(details);\n\t}\n};\n\n/**\n * Local Notifications Schedule\n * @param {Object}\t\tdetails (same as localNotification)\n * @param {Date}\t\tdetails.date - The date and time when the system should deliver the notification\n */\nNotifications.localNotificationSchedule = function(details: Object) {\n\tif ( Platform.OS === 'ios' ) {\n\t\tthis.handler.scheduleLocalNotification({\n\t\t\tfireDate: details.date.toISOString(),\n\t\t\talertBody: details.message,\n\t\t\tuserInfo: details.userInfo\n\t\t});\n\t} else {\n\t\tdetails.fireDate = details.date.getTime();\n\t\tdelete details.date;\n\t\tthis.handler.scheduleLocalNotification(details);\n\t}\n};\n\n/* Internal Functions */\nNotifications._onRegister = function(token: String) {\n\tif ( this.onRegister !== false ) {\n\t\tthis.onRegister({\n\t\t\ttoken: token,\n\t\t\tos: Platform.OS\n\t\t});\n\t}\n};\n\nNotifications._onRemoteFetch = function(notificationData: Object) {\n\tif ( this.onRemoteFetch !== false ) {\n\t\tthis.onRemoteFetch(notificationData)\n\t}\n}\n\nNotifications._onNotification = function(data, isFromBackground = null) {\n\tif ( isFromBackground === null ) {\n\t\tisFromBackground = (\n\t\t\tdata.foreground === false ||\n\t\t\tAppState.currentState === 'background'\n\t\t);\n\t}\n\n\tif ( this.onNotification !== false ) {\n\t\tif ( Platform.OS === 'ios' ) {\n\t\t\tthis.onNotification({\n\t\t\t\tforeground: ! isFromBackground,\n\t\t\t\tuserInteraction: isFromBackground,\n\t\t\t\tmessage: data.getMessage(),\n\t\t\t\tdata: data.getData(),\n\t\t\t\tbadge: data.getBadgeCount(),\n\t\t\t\talert: data.getAlert(),\n\t\t\t\tsound: data.getSound()\n\t\t\t});\n\t\t} else {\n\t\t\tvar notificationData = {\n\t\t\t\tforeground: ! isFromBackground,\n\t\t\t\t...data\n\t\t\t};\n\n\t\t\tif ( typeof notificationData.data === 'string' ) {\n\t\t\t\ttry {\n\t\t\t\t\tnotificationData.data = JSON.parse(notificationData.data);\n\t\t\t\t} catch(e) {\n\t\t\t\t\t/* void */\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.onNotification(notificationData);\n\t\t}\n\t}\n};\n\n/* onResultPermissionResult */\nNotifications._onPermissionResult = function() {\n\tthis.isPermissionsRequestPending = false;\n};\n\n// Prevent requestPermissions called twice if ios result is pending\nNotifications._requestPermissions = function() {\n\tif ( Platform.OS === 'ios' ) {\n\t\tif ( this.isPermissionsRequestPending === false ) {\n\t\t\tthis.isPermissionsRequestPending = true;\n\t\t\treturn this.callNative( 'requestPermissions', [ this.permissions ])\n\t\t\t\t\t\t\t.then(this._onPermissionResult.bind(this))\n\t\t\t\t\t\t\t.catch(this._onPermissionResult.bind(this));\n\t\t}\n\t} else if ( typeof this.senderID !== 'undefined' ) {\n\t\treturn this.callNative( 'requestPermissions', [ this.senderID ]);\n\t}\n};\n\n// Stock requestPermissions function\nNotifications.requestPermissions = function() {\n\tif ( Platform.OS === 'ios' ) {\n\t\treturn this.callNative( 'requestPermissions', [ this.permissions ]);\n\t} else if ( typeof this.senderID !== 'undefined' ) {\n\t\treturn this.callNative( 'requestPermissions', [ this.senderID ]);\n\t}\n};\n\n/* Fallback functions */\nNotifications.presentLocalNotification = function() {\n\treturn this.callNative('presentLocalNotification', arguments);\n};\n\nNotifications.scheduleLocalNotification = function() {\n\treturn this.callNative('scheduleLocalNotification', arguments);\n};\n\nNotifications.cancelLocalNotifications = function() {\n\treturn this.callNative('cancelLocalNotifications', arguments);\n};\n\nNotifications.cancelAllLocalNotifications = function() {\n\treturn this.callNative('cancelAllLocalNotifications', arguments);\n};\n\nNotifications.setApplicationIconBadgeNumber = function() {\n\treturn this.callNative('setApplicationIconBadgeNumber', arguments);\n};\n\nNotifications.getApplicationIconBadgeNumber = function() {\n\treturn this.callNative('getApplicationIconBadgeNumber', arguments);\n};\n\nNotifications.popInitialNotification = function(handler) {\n\tthis.callNative('getInitialNotification').then(function(result){\n\t\thandler(result);\n\t});\n};\n\nNotifications.abandonPermissions = function() {\n\treturn this.callNative('abandonPermissions', arguments);\n};\n\nNotifications.checkPermissions = function() {\n\treturn this.callNative('checkPermissions', arguments);\n};\n\nNotifications.registerNotificationActions = function() {\n\treturn this.callNative('registerNotificationActions', arguments)\n}\n\nNotifications.clearAllNotifications = function() {\n\t// Only available for Android\n\treturn this.callNative('clearAllNotifications', arguments)\n}\n\nmodule.exports = Notifications;\n"}